#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 >;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35 >;
            hold-trigger-on-release;
        };

        bot: bluetooth_output {
            compatible = "zmk,behavior-mod-morph";
            label = "Bluetooth output (shift mod)";
            bindings = <&out OUT_TOG>, <&out OUT_USB>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        epw: external_power {
            compatible = "zmk,behavior-mod-morph";
            label = "External power (shift mod)";
            bindings = <&ext_power EP_TOG>, <&ext_power EP_OFF>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q        &kp W        &kp E                &kp R              &kp T                                  &kp Y            &kp U               &kp I                 &kp O             &kp P
  &hml LGUI A  &hml LALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G                                  &kp H            &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_ALT L  &hmr RGUI SEMICOLON
  &lt 3 Z      &kp X        &kp C                &kp V              &kp B                                  &kp N            &kp M               &kp COMMA             &kp DOT           &lt 3 SQT
                                                 &lt 4 ESC          &lt 5 SPACE  &lt 6 TAB    &lt 7 ENTER  &lt 8 BACKSPACE  &lt 9 DELETE
            >;
        };

        Extra {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Tap {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Button {
            bindings = <
  &trans        &trans                   &trans                   &trans                  &trans                    &trans  &trans                      &trans                    &trans                 &trans
  &kp LEFT_GUI  &hml LEFT_ALT BACKSPACE  &hml LEFT_CONTROL ENTER  &hml LEFT_SHIFT DELETE  &trans                    &trans  &hmr RIGHT_SHIFT BACKSPACE  &hmr RIGHT_CONTROL ENTER  &hmr RIGHT_ALT DELETE  &kp RIGHT_GUI
  &trans        &trans                   &trans                   &trans                  &trans                    &trans  &trans                      &trans                    &trans                 &trans
                                                                  &trans                  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Media {
            bindings = <
  &none         &none         &none             &none           &none                       &bt BT_CLR    &bl BL_DEC    &bl BL_INC    &bl BL_TOG    &studio_unlock
  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none                       &kp C_PREV    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT    &epw
  &none         &none         &none             &none           &none                       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bot
                                                &none           &none  &none    &kp C_STOP  &kp C_PP      &kp C_MUTE
            >;
        };

        Nav {
            bindings = <
  &trans        &trans        &trans            &trans          &trans                       &kp LS(LA(LC(LG(LEFT))))  &kp LS(LA(LC(LG(DOWN))))  &kp LS(LA(LC(LG(UP))))  &kp LS(LA(LC(LG(RIGHT))))  &trans
  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans                       &kp LEFT                  &kp DOWN                  &kp UP                  &kp RIGHT                  &kp CAPS
  &trans        &trans        &trans            &trans          &trans                       &kp HOME                  &kp PAGE_DOWN             &kp PAGE_UP             &kp END                    &kp INS
                                                &trans          &trans  &trans    &kp ENTER  &kp BACKSPACE             &kp DELETE
            >;
        };

        Mouse {
            bindings = <
  &trans        &trans        &trans            &trans          &trans                       &kp LC(Y)       &kp LC(V)       &kp LC(C)     &kp LC(X)        &kp LC(Z)
  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans                       &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
  &trans        &trans        &trans            &trans          &trans                       &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
                                                &trans          &trans  &trans    &mkp RCLK  &mkp LCLK       &mkp MCLK
            >;
        };

        Sym {
            bindings = <
  &kp LBRC   &kp AMPS  &kp STAR   &kp LPAR   &kp RBRC                       &trans  &trans           &trans             &trans         &trans
  &kp QMARK  &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS                       &trans  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI
  &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE                       &trans  &trans           &trans             &trans         &trans
                                  &kp LPAR   &kp RPAR  &kp UNDER    &trans  &trans  &trans
            >;
        };

        Num {
            bindings = <
  &kp LBKT   &kp N7  &kp N8  &kp N9   &kp RBKT                        &trans  &trans           &trans             &trans         &trans
  &kp FSLH   &kp N4  &kp N5  &kp N6   &kp EQUAL                       &trans  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI
  &kp GRAVE  &kp N1  &kp N2  &kp N3   &kp BSLH                        &trans  &trans           &trans             &trans         &trans
                             &kp DOT  &kp N0     &kp MINUS    &trans  &trans  &trans
            >;
        };

        Fun {
            bindings = <
  &kp F12  &kp F7  &kp F8  &kp F9     &kp PSCRN                           &trans  &trans     &trans     &trans         &trans
  &kp F11  &kp F4  &kp F5  &kp F6     &kp SLCK                            &trans  &kp RSHFT  &kp RCTRL  &kp RIGHT_ALT  &kp RIGHT_GUI
  &kp F10  &kp F1  &kp F2  &kp F3     &kp PAUSE_BREAK                     &trans  &trans     &trans     &trans         &trans
                           &kp GLOBE  &kp SPACE        &kp TAB    &trans  &trans  &trans
            >;
        };
    };
};
