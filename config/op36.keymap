#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

&lt {
    require-prior-idle-ms = <125>;
    quick-tap-ms = <200>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 >;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35 >;
            hold-trigger-on-release;
        };

        bot: bluetooth_output {
            compatible = "zmk,behavior-mod-morph";
            label = "Bluetooth output (shift mod)";
            bindings = <&out OUT_TOG>, <&out OUT_USB>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        epw: external_power {
            compatible = "zmk,behavior-mod-morph";
            label = "External power (shift mod)";
            bindings = <&ext_power EP_TOG>, <&ext_power EP_OFF>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dtboot: dt_bootloader {
            compatible = "zmk,behavior-tap-dance";
            label = "Double tap bootloader";
            #binding-cells = <0>;
            bindings = <&none>, <&bootloader>;
        };

        dttap: dt_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "Double tap Tap layer";
            #binding-cells = <0>;
            bindings = <&none>, <&to 2>;
        };

        dtextra: dt_extra {
            compatible = "zmk,behavior-tap-dance";
            label = "Double tap Extra layer";
            #binding-cells = <0>;
            bindings = <&none>, <&to 1>;
        };

        dtbase: dt_base {
            compatible = "zmk,behavior-tap-dance";
            label = "Double tap Base layer";
            #binding-cells = <0>;
            bindings = <&none>, <&to 0>;
        };

        dtmedia: dt_media {
            compatible = "zmk,behavior-tap-dance";
            label = "Double tab Media layer";
            #binding-cells = <0>;
            bindings = <&none>, <&to 4>;
        };

        dtnav: dt_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "Double tap Nav layer";
            #binding-cells = <0>;
            bindings = <&none>, <&to 5>;
        };

        dtmouse: dt_mouse {
            compatible = "zmk,behavior-tap-dance";
            label = "Double tap Mouse layer";
            #binding-cells = <0>;
            bindings = <&none>, <&to 6>;
        };

        dtsym: dt_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "Double tap Sym layer";
            #binding-cells = <0>;
            bindings = <&none>, <&to 7>;
        };

        dtnum: dt_num {
            compatible = "zmk,behavior-tap-dance";
            label = "Double tap Num layer";
            #binding-cells = <0>;
            bindings = <&none>, <&to 8>;
        };

        dtfun: dt_fun {
            compatible = "zmk,behavior-tap-dance";
            label = "Double tap Fun layer";
            #binding-cells = <0>;
            bindings = <&none>, <&to 9>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q        &kp W        &kp E         &kp R         &kp T                                  &kp Y       &kp U         &kp I         &kp O        &kp P
  &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F  &kp G                                  &kp H       &hmr RSHFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI
  &lt 3 Z      &kp X        &kp C         &kp V         &kp B                                  &kp N       &kp M         &kp COMMA     &kp DOT      &lt 3 SQT
                                          &lt 4 ESC     &lt 5 SPACE  &lt 6 TAB    &lt 7 ENTER  &lt 8 BSPC  &lt 9 DEL
            >;
        };

        Extra {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &tog 1  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Tap {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &tog 2  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Button {
            bindings = <
  &kp LC(Z)  &kp LC(X)             &kp LC(C)                &kp LC(V)                 &kp LC(Y)                        &kp LC(Y)  &kp LC(V)                 &kp LC(C)                &kp LC(X)             &kp LC(Z)
  &kp LGUI   &mt LALT BSPC         &mt LCTRL ENTER          &mt LSHIFT DEL            &none                            &none      &mt RSHFT DEL             &mt RCTRL ENTER          &mt RALT BSPC         &kp RGUI
  &trans     &mt LA(LS(LGUI)) ESC  &mt LA(LS(LCTRL)) SPACE  &mt LS(LA(LC(LGUI))) TAB  &none                            &none      &mt RS(RA(RC(RGUI))) TAB  &mt RA(RS(RCTRL)) SPACE  &mt RA(RS(RGUI)) ESC  &trans
                                                            &mkp MB3                  &mkp MB1   &mkp MB2    &mkp MB2  &mkp MB1   &mkp MB3
            >;
        };

        Media {
            bindings = <
  &dtboot   &dttap    &dtextra   &dtbase    &none                         &bt BT_CLR    &bl BL_DEC    &bl BL_INC    &bl BL_TOG    &studio_unlock
  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none                         &kp C_PREV    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT    &epw
  &none     &none     &dtfun     &dtmedia   &none                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bot
                                 &trans     &trans  &trans    &kp C_STOP  &kp C_PP      &kp C_MUTE
            >;
        };

        Nav {
            bindings = <
  &dtboot   &dttap    &dtextra   &dtbase     &none                        &kp LC(Y)  &kp LC(V)      &kp LC(C)    &kp LC(X)  &kp LC(Z)
  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHIFT  &none                        &kp LEFT   &kp DOWN       &kp UP       &kp RIGHT  &kp CAPS
  &none     &none     &dtnum     &dtnav      &none                        &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &kp INS
                                 &trans      &trans  &trans    &kp ENTER  &kp BSPC   &kp DEL
            >;
        };

        Mouse {
            bindings = <
  &dtboot   &dttap    &dtextra   &dtbase     &none                       &kp LC(Y)       &kp LC(V)       &kp LC(C)     &kp LC(X)        &kp LC(Z)
  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHIFT  &none                       &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none
  &none     &none     &dtsym     &dtmouse    &none                       &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none
                                 &trans      &trans  &trans    &mkp MB2  &mkp MB1        &mkp MB3
            >;
        };

        Sym {
            bindings = <
  &kp LBRC   &kp AMPS  &kp STAR   &kp LPAR   &kp RBRC                       &none   &dtbase    &dtextra   &dttap    &dtboot
  &kp QMARK  &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS                       &none   &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
  &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE                       &none   &dtsym     &dtmouse   &none     &none
                                  &kp LPAR   &kp RPAR  &kp UNDER    &trans  &trans  &trans
            >;
        };

        Num {
            bindings = <
  &kp LBKT   &kp N7  &kp N8  &kp N9   &kp RBKT                        &none   &dtbase     &dtextra   &dttap    &dtboot
  &kp FSLH   &kp N4  &kp N5  &kp N6   &kp EQUAL                       &none   &kp RSHIFT  &kp RCTRL  &kp RALT  &kp RGUI
  &kp GRAVE  &kp N1  &kp N2  &kp N3   &kp BSLH                        &none   &dtnum      &dtnav     &none     &none
                             &kp DOT  &kp N0     &kp MINUS    &trans  &trans  &trans
            >;
        };

        Fun {
            bindings = <
  &kp F12  &kp F7  &kp F8  &kp F9     &kp PSCRN                           &none   &dtbase    &dtextra   &dttap    &dtboot
  &kp F11  &kp F4  &kp F5  &kp F6     &kp SLCK                            &none   &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
  &kp F10  &kp F1  &kp F2  &kp F3     &kp PAUSE_BREAK                     &none   &dtfun     &dtmedia   &none     &none
                           &kp GLOBE  &kp SPACE        &kp TAB    &trans  &trans  &trans
            >;
        };
    };
};
